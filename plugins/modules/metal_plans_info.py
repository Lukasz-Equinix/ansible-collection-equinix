#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = ""
EXAMPLES = ""
RETURN = ""

# End

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import SpecField, FieldType, SpecReturnValue
import traceback

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    getSpecDocMeta,
)

module_spec = dict(
    name=SpecField(
        type=FieldType.string,
        description=['Filter resource on substring in name attribute.'],
    ),
    # parent_resource_id=SpecField(
    #     type=FieldType.string,
    #     description=['UUID of parent resource containing the resource.'],
    # ),
    category=SpecField(
        type=FieldType.string,
        description=['Some attribute of the resource.'],
        editable=True,
    ),
    count=SpecField(
        type=FieldType.string,
        description=['Some attribute of the resource.'],
        editable=True,
    ),
    href=SpecField(
        type=FieldType.string,
        description=['Some attribute of the resource.'],
        editable=True,
    ),
    size=SpecField(
        type=FieldType.string,
        description=['Some attribute of the resource.'],
        editable=True,
    ),
    type=SpecField(
        type=FieldType.string,
        description=['Some attribute of the resource.'],
        editable=True,
    ),
)

specdoc_examples = ['''
- name: Gather information about all plans
  hosts: localhost
  tasks:
      - equinix.cloud.metal_plans_info
''', '''
''',
                    ]

result_sample = ['''

[  
  {                                                                           
    "changed": false,                                                                         
    "resources": [                                                                                                                                                    
      {                                                                                     
        "available_in": [],                                                                                                                                                       
        "available_in_metros": [],
        "category": [
          "compute",
          "current_gen"
        ],
        "class": "a3.large.opt-m3a2",
        "deployment_types": [],
        "description": "a3.large.opt-m3a2.x86",
        "id": "8c04950a-87ab-5e52-a112-5a90bbca8868",
        "legacy": false,
        "line": "baremetal",
        "name": "a3.large.opt-m3a2.x86",
        "pricing_hour": 8.2,
        "pricing_month": null,
        "slug": "a3.large.opt-m3a2"
      },
    ]
  }
]''',
]

SPECDOC_META = getSpecDocMeta(
    short_description="Gather information about Equinix Metal resources",
    description=(
        'Gather information about Equinix Metal resources'
    ),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "resources": SpecReturnValue(
            description='Found resources',
            type=FieldType.dict,
            sample=result_sample,
        ),
    },
)


def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
        is_info=True,
    )
    try:
        module.params_syntax_check()
        return_value = {'resources': module.get_list("metal_plans")}
    except Exception as e:
        tr = traceback.format_exc()
        module.fail_json(msg=to_native(e), exception=tr)
    module.exit_json(**return_value)


if __name__ == '__main__':
    main()
